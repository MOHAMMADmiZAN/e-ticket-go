basePath: /api/v1/auth
definitions:
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - customer
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.UserLoginDTO:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.UserPasswordUpdateDTO:
    properties:
      password:
        minLength: 6
        type: string
      userID:
        description: Ensure UserID is passed securely, not from client directly in
          a real-world scenario
        type: integer
    required:
    - password
    - userID
    type: object
  pkg.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8083
info:
  contact:
    email: takbir.jcd@gmail.com
    name: Mohammad Mizan
    url: http://swagger.io/support
  description: The My Auth Service API provides a secure and efficient means for handling
    authentication and authorization processes. By exposing endpoints for user registration,
    authentication, and account management, this API facilitates the establishment
    and maintenance of secure user sessions and the protection of user data. The API
    is meticulously designed to offer robust security features that align with industry
    best practices.
  license:
    name: Apache License Version 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: My Auth Service API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: This endpoint authenticates a user using username and password.
      parameters:
      - description: User Login DTO
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid login data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Authenticate user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user with the provided credentials.
      parameters:
      - description: Create User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Register new user
      tags:
      - auth
  /users/{id}:
    delete:
      description: This endpoint deletes a user with the specified ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Delete user
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: This endpoint updates the password for the user with the specified
        ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Password Update DTO
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.UserPasswordUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user ID format or password data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Update user password
      tags:
      - users
swagger: "2.0"
