basePath: /api/v1/auth
definitions:
  dto.CreateLoginHistoryRequest:
    properties:
      deviceInformation:
        type: string
      failureReason:
        type: string
      ipAddress:
        type: string
      successful:
        type: boolean
      userID:
        type: integer
    required:
    - deviceInformation
    - ipAddress
    - userID
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - customer
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.CreateUserVerificationRequest:
    properties:
      userID:
        type: integer
      verificationType:
        type: string
    required:
    - userID
    - verificationType
    type: object
  dto.UpdateUserVerificationRequest:
    properties:
      verificationStatus:
        enum:
        - pending
        - verified
        - failed
        type: string
      verifiedAt:
        type: string
    required:
    - verificationStatus
    type: object
  dto.UserLoginDTO:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.UserPasswordUpdateDTO:
    properties:
      password:
        minLength: 6
        type: string
      userID:
        description: Ensure UserID is passed securely, not from client directly in
          a real-world scenario
        type: integer
    required:
    - password
    - userID
    type: object
  pkg.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8083
info:
  contact:
    email: takbir.jcd@gmail.com
    name: Mohammad Mizan
    url: http://swagger.io/support
  description: The My Auth Service API provides a secure and efficient means for handling
    authentication and authorization processes. By exposing endpoints for user registration,
    authentication, and account management, this API facilitates the establishment
    and maintenance of secure user sessions and the protection of user data. The API
    is meticulously designed to offer robust security features that align with industry
    best practices.
  license:
    name: Apache License Version 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: My Auth Service API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: This endpoint authenticates a user using username and password.
      parameters:
      - description: User Login DTO
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid login data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Authenticate user
      tags:
      - auth
  /login-attempts:
    post:
      consumes:
      - application/json
      description: This endpoint records a login attempt for a user.
      parameters:
      - description: Create Login History Request
        in: body
        name: loginAttempt
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLoginHistoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Login attempt recorded successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid login attempt data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Record login attempt
      tags:
      - login-history
  /login-attempts/{userID}:
    get:
      consumes:
      - application/json
      description: This endpoint fetches all login attempts for a specified user within
        a given time frame.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Start time (RFC3339 format)
        in: query
        name: from
        required: true
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login attempts fetched successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Get login attempts by user
      tags:
      - login-history
  /logout/{historyID}:
    post:
      consumes:
      - application/json
      description: This endpoint records the logout time for a specific login history
        record.
      parameters:
      - description: History ID
        in: path
        name: historyID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Logout recorded successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid history ID
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Record user logout
      tags:
      - login-history
  /register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user with the provided credentials.
      parameters:
      - description: Create User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Register new user
      tags:
      - auth
  /suspicious-activity/{userID}:
    get:
      consumes:
      - application/json
      description: This endpoint checks for suspicious login activity for a specified
        user.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Suspicious activity status returned
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Check for suspicious activity
      tags:
      - login-history
  /users/{id}:
    delete:
      description: This endpoint deletes a user with the specified ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Delete user
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: This endpoint updates the password for the user with the specified
        ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Password Update DTO
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.UserPasswordUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid user ID format or password data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Update user password
      tags:
      - users
  /users/{userID}/verifications:
    get:
      description: This endpoint retrieves all verification entries associated with
        a specified user.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of verifications fetched successfully
          schema:
            items:
              $ref: '#/definitions/pkg.APIResponse'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Get all verifications for a user
      tags:
      - verification
  /verifications:
    post:
      consumes:
      - application/json
      description: This endpoint creates a user verification entry.
      parameters:
      - description: Create User Verification Request
        in: body
        name: verification
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserVerificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Verification created successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Create user verification
      tags:
      - verification
  /verifications/{id}:
    get:
      description: This endpoint retrieves the details of a specific verification.
      parameters:
      - description: Verification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Verification details retrieved successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid verification ID
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Get verification details
      tags:
      - verification
    put:
      consumes:
      - application/json
      description: This endpoint updates the status of an existing verification.
      parameters:
      - description: Verification ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Verification Status Request
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Verification status updated successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Invalid verification ID or request data
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Update verification status
      tags:
      - verification
swagger: "2.0"
