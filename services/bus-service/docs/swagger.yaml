basePath: /api/v1/buses
definitions:
  dto.BusResponse:
    properties:
      busCode:
        type: string
      capacity:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      lastServiceDate:
        type: string
      licensePlate:
        type: string
      makeModel:
        type: string
      nextServiceDate:
        type: string
      routeId:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      year:
        type: integer
    type: object
  dto.CreateBusDTO:
    properties:
      busCode:
        maxLength: 100
        type: string
      capacity:
        type: integer
      lastServiceDate:
        type: string
      licensePlate:
        maxLength: 20
        type: string
      makeModel:
        maxLength: 100
        type: string
      nextServiceDate:
        type: string
      routeId:
        type: integer
      status:
        enum:
        - active
        - maintenance
        - decommissioned
        type: string
      year:
        description: Assuming year range from 1900 to 2100
        type: integer
    required:
    - busCode
    - capacity
    - lastServiceDate
    - licensePlate
    - makeModel
    - nextServiceDate
    - routeId
    - status
    - year
    type: object
  dto.CreateSeatRequest:
    properties:
      bus_id:
        type: integer
      class_type:
        allOf:
        - $ref: '#/definitions/models.SeatClassType'
        enum:
        - Regular
        - Business
      is_available:
        description: Optional, defaults to true if not specified.
        type: boolean
      seat_number:
        type: string
      seat_status:
        allOf:
        - $ref: '#/definitions/models.SeatStatus'
        enum:
        - Booked
        - Available
        - Reserved
    required:
    - bus_id
    - class_type
    - seat_number
    - seat_status
    type: object
  dto.SeatResponse:
    properties:
      bus_id:
        type: integer
      class_type:
        $ref: '#/definitions/models.SeatClassType'
      id:
        type: integer
      is_available:
        type: boolean
      seat_number:
        type: string
      seat_status:
        $ref: '#/definitions/models.SeatStatus'
    type: object
  dto.UpdateBusDTO:
    properties:
      busCode:
        maxLength: 100
        type: string
      capacity:
        type: integer
      lastServiceDate:
        type: string
      licensePlate:
        maxLength: 20
        type: string
      makeModel:
        maxLength: 100
        type: string
      nextServiceDate:
        type: string
      routeId:
        type: integer
      status:
        enum:
        - active
        - maintenance
        - decommissioned
        type: string
      year:
        description: Assuming year range from 1900 to 2100
        type: integer
    type: object
  dto.UpdateBusServiceDatesDTO:
    properties:
      lastServiceDate:
        type: string
      nextServiceDate:
        type: string
    required:
    - lastServiceDate
    - nextServiceDate
    type: object
  dto.UpdateSeatRequest:
    properties:
      bus_id:
        description: Use pointers to differentiate between zero value and omitted
          field.
        type: integer
      class_type:
        allOf:
        - $ref: '#/definitions/models.SeatClassType'
        enum:
        - Regular
        - Business
      is_available:
        description: Optional, can be omitted.
        type: boolean
      seat_number:
        type: string
      seat_status:
        allOf:
        - $ref: '#/definitions/models.SeatStatus'
        enum:
        - Booked
        - Available
        - Reserved
    type: object
  models.SeatClassType:
    enum:
    - Regular
    - Business
    type: string
    x-enum-varnames:
    - ClassRegular
    - ClassBusiness
  models.SeatStatus:
    enum:
    - Booked
    - Available
    - Reserved
    type: string
    x-enum-varnames:
    - StatusBooked
    - StatusAvailable
    - StatusReserved
  pkg.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8082
info:
  contact:
    email: takbir.jcd@gmail.com
    name: Mohammad Mizan
    url: http://swagger.io/support
  description: This API serves as an interface to interact with the My Bus Service
    platform, providing endpoints for managing bus routes, bookings, and user interactions.
  license:
    name: Apache License Version 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: My Bus Service API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all buses from the bus service.
      produces:
      - application/json
      responses:
        "200":
          description: List of all buses
          schema:
            items:
              $ref: '#/definitions/dto.BusResponse'
            type: array
        "500":
          description: Internal Server Error - Could not retrieve buses
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Get all buses
      tags:
      - buses
    post:
      consumes:
      - application/json
      description: Add a new bus to the system with the provided details.
      parameters:
      - description: Bus Creation Data
        in: body
        name: bus
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBusDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created bus
          schema:
            $ref: '#/definitions/dto.BusResponse'
        "400":
          description: Bad Request - Invalid input provided
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error - Unable to create bus
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Create a new bus
      tags:
      - buses
  /{busID}/seats/:
    get:
      consumes:
      - application/json
      description: Retrieves the seat inventory for a specific bus
      parameters:
      - description: Bus ID
        in: path
        name: busID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Array of Seat objects
          schema:
            items:
              $ref: '#/definitions/dto.SeatResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
    post:
      consumes:
      - application/json
      description: Adds a new seat to a specific bus
      parameters:
      - description: Bus ID
        in: path
        name: busID
        required: true
        type: integer
      - description: Seat Data
        in: body
        name: seat
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSeatRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created seat
          schema:
            $ref: '#/definitions/dto.SeatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
  /{busID}/seats/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a seat from the system
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted seat
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
    get:
      consumes:
      - application/json
      description: Retrieves details of a specific seat
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved seat
          schema:
            $ref: '#/definitions/dto.SeatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
    put:
      consumes:
      - application/json
      description: Updates the details or status of a specific seat
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      - description: Seat update data
        in: body
        name: seat
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSeatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated seat
          schema:
            $ref: '#/definitions/dto.SeatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
  /{busID}/seats/{id}/status:
    put:
      consumes:
      - application/json
      description: Updates the status of a seat (booked, available, reserved)
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      - description: Seat status data
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSeatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated seat status
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
  /{busID}/seats/availability:
    get:
      consumes:
      - application/json
      description: Retrieves all seats that are currently available
      produces:
      - application/json
      responses:
        "200":
          description: Array of available seats
          schema:
            items:
              $ref: '#/definitions/dto.SeatResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
  /{busID}/seats/status/{status}:
    get:
      consumes:
      - application/json
      description: Retrieves all seats with a specific status
      parameters:
      - description: Seat Status
        enum:
        - booked
        - available
        - reserved
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Array of seats with the specified status
          schema:
            items:
              $ref: '#/definitions/dto.SeatResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      tags:
      - seats
  /{busId}:
    delete:
      consumes:
      - application/json
      description: Delete the bus with the specified ID.
      parameters:
      - description: Bus ID
        in: path
        name: busId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Bus deleted successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Bad Request - Invalid bus ID
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "404":
          description: Not Found - Bus not found
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error - Unable to delete bus
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Delete a bus
      tags:
      - buses
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific bus by its ID.
      parameters:
      - description: Bus ID
        in: path
        name: busId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved bus
          schema:
            $ref: '#/definitions/dto.BusResponse'
        "400":
          description: Bad Request - Invalid ID format or Bus not found
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Get bus by ID
      tags:
      - buses
    put:
      consumes:
      - application/json
      description: Update the details of a specific bus by its ID.
      parameters:
      - description: Bus ID
        in: path
        name: busId
        required: true
        type: integer
      - description: Bus Update Data
        in: body
        name: bus
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBusDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Bus updated successfully
          schema:
            $ref: '#/definitions/dto.BusResponse'
        "400":
          description: Bad Request - Invalid ID or update data format
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "404":
          description: Not Found - Bus not found
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "500":
          description: Internal Server Error - Could not update bus
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Update bus details
      tags:
      - buses
  /{busId}/service-dates:
    put:
      consumes:
      - application/json
      description: Update the last and next service dates for a specific bus.
      parameters:
      - description: Bus ID
        in: path
        name: busId
        required: true
        type: integer
      - description: Service Dates
        in: body
        name: serviceDates
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBusServiceDatesDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Bus service dates updated successfully
          schema:
            $ref: '#/definitions/pkg.APIResponse'
        "400":
          description: Bad Request - Invalid bus ID or service dates
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Update bus service dates
      tags:
      - buses
  /status:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all buses with the specified status.
      parameters:
      - description: status
        enum:
        - active
        - maintenance
        - decommissioned
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of all buses
          schema:
            items:
              $ref: '#/definitions/dto.BusResponse'
            type: array
        "400":
          description: Bad Request - Invalid status
          schema:
            $ref: '#/definitions/pkg.APIResponse'
      summary: Get all buses by status
      tags:
      - buses
swagger: "2.0"
