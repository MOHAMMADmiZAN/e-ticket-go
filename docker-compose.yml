version: '3.8'

services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist the data in a volume for the database container to keep the data between container restarts and rebuilds
    networks:
      - backend-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network
    restart: on-failure

  route-service:
    build:
      context: ./services/route-service
      dockerfile: deployments/Dockerfile
      args:
        - ENV=${ENV}  # Takes the environment variable from the .env file or shell environment
    ports:
      - "8080:8080"  # Expose the port for the route-service to the host
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${ROUTE_POSTGRES_DB}
    env_file:
      - ./services/route-service/.env  # Use an environment file for configuration
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network
    restart: on-failure
    volumes:
      - ./services/route-service:/app  # Mount the route-service directory to the container for development purposes oNLY (optional)

networks:
  backend-network:
    driver: bridge


volumes:
  postgres_data:
    driver: local
